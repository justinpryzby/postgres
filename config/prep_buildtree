#! /bin/sh
set -e

# This script prepares a PostgreSQL build tree.  It is intended
# to be run by the configure script.

me=`basename $0`

help="\
Usage: $me sourcetree [buildtree]"

if test -z "$1"; then
    echo "$help" 1>&2
    exit 1
elif test x"$1" = x"--help"; then
    echo "$help"
    exit 0
fi

unset CDPATH

sourcetree=`cd $1 && pwd`

buildtree=`cd ${2:-'.'} && pwd`

# We must not auto-create the subdirectories holding built documentation.
# If we did, it would interfere with installation of prebuilt docs from
# the source tree, if a VPATH build is done from a distribution tarball.
# See bug #5595.

#(cd "$sourcetree" && find . \( -type d -o -name Makefile -o -name GNUmakefile \) -print |cpio -pdl "$buildtree")

#(cd "$sourcetree" && find . -print |grep -E '/Makefile$|/GNUmakefile$' |grep -v "doc/src/sgml/images/" |xargs tar c) |
#	(cd "$buildtree" && tar x)
## XXX: for each *akefile.in, rm the *akefile
## for f in `
##find "$sourcetree" -name '*akefile.in'
#exit

( cd "$sourcetree" && find . -type d \( \( -name CVS -prune \) -o \( -name .git -prune \) -o -print \) |grep -v "doc/src/sgml/\+" ) |
	( cd "$buildtree" && xargs mkdir -p )

for item in `find "$sourcetree" -name Makefile -print -o -name GNUmakefile -print | grep -v "$sourcetree/doc/src/sgml/images/"`; do
#for item in `find "$sourcetree" -print |grep -E '/Makefile$|/GNUmakefile$' | grep -v "$sourcetree/doc/src/sgml/images/"`; do
    filename=${item#$sourcetree}
    if test ! -f "${item}.in"; then
        [ -e "$buildtree/$filename" ] && continue
        cmp "$item" "$buildtree/$filename" >/dev/null 2>&1 ||
            ln -fs "$item" "$buildtree/$filename"
    fi
done

exit 0
