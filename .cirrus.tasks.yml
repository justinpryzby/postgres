# CI configuration file for CI utilizing cirrus-ci.org
#
# For instructions on how to enable the CI integration in a repository and
# further details, see src/tools/ci/README


env:
  # The lower depth accelerates git clone. Use a bit of depth so that
  # concurrent tasks and retrying older jobs have a chance of working.
  CIRRUS_CLONE_DEPTH: 500
  # Useful to be able to analyse what in a script takes long
  CIRRUS_LOG_TIMESTAMP: true

  CCACHE_MAXSIZE: "750M"
  CCACHE_HARDLINK: 1
  #CCACHE_COMPRESSLEVEL: 3
  #CCACHE_NOCOMPRESS: 1
  # The statslog should be stored somewhere *outside* the persistent ccache dir
  CCACHE_STATSLOG: ${CIRRUS_WORKING_DIR}/ccache-stats.log

  # target to test, for all but windows
  CHECK: check-world PROVE_FLAGS=$PROVE_FLAGS
  CHECKFLAGS: -Otarget
  PROVE_FLAGS: --timer
  # Build test dependencies as part of the build step, to see compiler
  # errors/warnings in one place.
  MBUILD_TARGET: all testprep
  MTEST_ARGS: --print-errorlogs --no-rebuild -C build
  PGCTLTIMEOUT: 120 # avoids spurious failures during parallel tests
  TEMP_CONFIG: ${CIRRUS_WORKING_DIR}/src/tools/ci/pg_ci_base.conf
  PG_TEST_EXTRA: kerberos ldap ssl libpq_encryption load_balance
  PG_FAILED_TESTDIR: ${CIRRUS_WORKING_DIR}/failed.build

  # The commit that this branch is rebased on.  There's no easy way to find this.
  # This does the right thing for cfbot, which always squishes all patches into a single commit.
  # And does the right thing for any 1-patch commits.
  # Patch series manually submitted to cirrus would benefit from setting this to the
  # number of patches in the series (or directly to the commit the series was rebased on).
  #BASE_COMMIT: HEAD~1
  # For demo purposes:
  BASE_COMMIT: HEAD~55


# What files to preserve in case tests fail
on_failure_ac: &on_failure_ac
  log_artifacts:
    paths:
      - "**/*.log"
      - "**/*.diffs"
      - "**/regress_log_*"
    type: text/plain

on_failure_meson: &on_failure_meson
  testrun_artifacts:
    paths:
      - failed.build*/**/*.log
      - failed.build*/**/*.diffs
      - failed.build*/**/regress_log_*
    type: text/plain

  # In theory it'd be nice to upload the junit files meson generates, so that
  # cirrus will nicely annotate the commit. Unfortunately the files don't
  # contain identifiable file + line numbers right now, so the annotations
  # don't end up useful. We could probably improve on that with a some custom
  # conversion script, but ...
  meson_log_artifacts:
    path: "build*/meson-logs/*.txt"
    type: text/plain

ccache: &ccache
  folder: $CCACHE_DIR
  fingerprint_script: echo ccache/$CIRRUS_TASK_NAME
  reupload_on_changes: true

# To avoid unnecessarily spinning up a lot of VMs / containers for entirely
# broken commits, have a minimal task that all others depend on.
task:
  name: SanityCheck

  # If a specific OS is requested, don't run the sanity check. This shortens
  # push-wait-for-ci cycle time a bit when debugging operating system specific
  # failures. Uses skip instead of only_if, as cirrus otherwise warns about
  # only_if conditions not matching.
  skip: $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:.*'

  env:
    CPUS: 4
    BUILD_JOBS: 8
    TEST_JOBS: 8
    IMAGE_FAMILY: pg-ci-bookworm
    CCACHE_DIR: ${CIRRUS_WORKING_DIR}/ccache_dir
    # no options enabled, should be small
    CCACHE_MAXSIZE: "150M"
    # TODO CCACHE_STATSLOG: $CCACHE_DIR.stats.log

  # While containers would start up a bit quicker, building is a bit
  # slower. This way we don't have to maintain a container image.
  <<: *linux_task_template

  ccache_cache:
    *ccache

  create_user_script: |
    useradd -m postgres
    chown -R postgres:postgres .
    mkdir -p ${CCACHE_DIR}
    chown -R postgres:postgres ${CCACHE_DIR}
    echo '* - memlock 134217728' > /etc/security/limits.d/postgres.conf
    su postgres -c "ulimit -l -H && ulimit -l -S"
    # Can't change container's kernel.core_pattern. Postgres user can't write
    # to / normally. Change that.
    chown root:postgres /
    chmod g+rwx /

  configure_script: |
    su postgres <<-EOF
      meson setup \
        --buildtype=debug \
        --auto-features=disabled \
        -Dtap_tests=enabled \
        build
    EOF
  build_script: |
    su postgres <<-EOF
      ninja -C build -j${BUILD_JOBS} ${MBUILD_TARGET}
      ccache --show-stats
    EOF
  upload_caches: ccache

  # Run a minimal set of tests. The main regression tests take too long for
  # this purpose. For now this is a random quick pg_regress style test, and a
  # tap test that exercises both a frontend binary and the backend.
  test_minimal_script: |
    su postgres <<-EOF
      ulimit -c unlimited
      meson test $MTEST_ARGS --suite setup
      meson test $MTEST_ARGS --num-processes ${TEST_JOBS} \
        cube/regress pg_ctl/001_start_stop
    EOF

  on_failure:
    <<: *on_failure_meson
    cores_script: |
      mkdir -m 770 /tmp/cores
      find / -maxdepth 1 -type f -name 'core*' -exec mv '{}' /tmp/cores/ \;
      src/tools/ci/cores_backtrace.sh linux /tmp/cores


task:
  name: FreeBSD - 13 - Meson
  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*freebsd.*'
  depends_on: SanityCheck

  env:
    CPUS: 4
    BUILD_JOBS: 4
    TEST_JOBS: 8
    IMAGE_FAMILY: pg-ci-freebsd-13
    DISK_SIZE: 50

    CCACHE_DIR: /tmp/ccache_dir
    CPPFLAGS: -DRELCACHE_FORCE_RELEASE -DENFORCE_REGRESSION_TEST_NAME_RESTRICTIONS
    CFLAGS: -Og -ggdb

    PG_TEST_INITDB_EXTRA_OPTS: -c debug_copy_parse_plan_trees=on -c debug_write_read_parse_plan_trees=on -c debug_raw_expression_coverage_test=on
    PG_TEST_PG_UPGRADE_MODE: --link
    PG_FAILED_TESTDIR: ${CIRRUS_WORKING_DIR}/failed.build

  <<: *freebsd_task_template

  sysinfo_script: |
    id
    uname -a
    ulimit -a -H && ulimit -a -S
    export

  ccache_cache:
    *ccache

  create_user_script: |
    pw useradd postgres
    chown -R postgres:postgres .
    mkdir -p ${CCACHE_DIR}
    chown -R postgres:postgres ${CCACHE_DIR}
  setup_core_files_script: |
    mkdir -m 770 /tmp/cores
    chown root:postgres /tmp/cores
    sysctl kern.corefile='/tmp/cores/%N.%P.core'
  setup_additional_packages_script: |
    pkg install -y lcov

  # NB: Intentionally build without -Dllvm. The freebsd image size is already
  # large enough to make VM startup slow.
  configure_script: |
    su postgres <<-EOF
      meson setup \
        --buildtype=debug \
        -Dcassert=true -Dinjection_points=true \
        -Duuid=bsd -Dtcl_version=tcl86 -Ddtrace=auto \
        -Dextra_lib_dirs=/usr/local/lib -Dextra_include_dirs=/usr/local/include/ \
        build
    EOF
  build_script: su postgres -c 'ninja -C build -j${BUILD_JOBS} ${MBUILD_TARGET}'
  upload_caches: ccache

  test_world_script: |
    su postgres <<-EOF
      ulimit -c unlimited
      # Write initial coverage files before running tests:
      time ./src/tools/ci/code-coverage-report "$BASE_COMMIT" ./build ./coverage "--initial"
      meson test $MTEST_ARGS --suite setup
      meson test $MTEST_ARGS --num-processes ${TEST_JOBS} regress/regress test_misc/003_check_guc unsafe_tests/regress

      # Create coverage report for files changed since the base commit.
      time ./src/tools/ci/code-coverage-report "$BASE_COMMIT" ./build ./coverage
    EOF

  # test runningcheck, freebsd chosen because it's currently fast enough
  test_running_script: |
    su postgres <<-EOF
      set -e
      ulimit -c unlimited
      meson test $MTEST_ARGS --quiet --suite setup
      export LD_LIBRARY_PATH="$(pwd)/build/tmp_install/usr/local/pgsql/lib/:$LD_LIBRARY_PATH"
      mkdir -p build/testrun ${PG_FAILED_TESTDIR}
      build/tmp_install/usr/local/pgsql/bin/initdb -N build/runningcheck --no-instructions -A trust
      echo "include '$(pwd)/src/tools/ci/pg_ci_base.conf'" >> build/runningcheck/postgresql.conf
      build/tmp_install/usr/local/pgsql/bin/pg_ctl -c -o '-c fsync=off' -D build/runningcheck -l ${PG_FAILED_TESTDIR}/runningcheck.log start
      meson test $MTEST_ARGS --num-processes ${TEST_JOBS} --setup running
      build/tmp_install/usr/local/pgsql/bin/pg_ctl -D build/runningcheck stop
    EOF

  on_failure:
    # if the server continues running, it often causes cirrus-ci to fail
    # during upload, as it doesn't expect artifacts to change size
    stop_running_script: |
      su postgres <<-EOF
        build/tmp_install/usr/local/pgsql/bin/pg_ctl -D build/runningcheck stop || true
      EOF
    <<: *on_failure_meson
    cores_script: src/tools/ci/cores_backtrace.sh freebsd /tmp/cores


# configure feature flags, shared between the task running the linux tests and
# the CompilerWarnings task
LINUX_CONFIGURE_FEATURES: &LINUX_CONFIGURE_FEATURES >-
  --with-gssapi
  --with-icu
  --with-ldap
  --with-libxml
  --with-libxslt
  --with-llvm
  --with-lz4
  --with-pam
  --with-perl
  --with-python
  --with-selinux
  --with-ssl=openssl
  --with-systemd
  --with-tcl --with-tclconfig=/usr/lib/tcl8.6/
  --with-uuid=ossp
  --with-zstd

LINUX_MESON_FEATURES: &LINUX_MESON_FEATURES >-
  -Dssl=none

# Linux, both 32bit and 64bit
task:
  env:
    CPUS: 4
    BUILD_JOBS: 4
    TEST_JOBS: 8 # experimentally derived to be a decent choice
    IMAGE_FAMILY: pg-ci-bookworm

    CCACHE_DIR: /tmp/ccache_dir
    DEBUGINFOD_URLS: "https://debuginfod.debian.net"

    # Enable a reasonable set of sanitizers. Use the linux task for that, as
    # it's one of the fastest tasks (without sanitizers). Also several of the
    # sanitizers work best on linux.
    #
    # The overhead of alignment sanitizer is low, undefined behaviour has
    # moderate overhead. Test alignment sanitizer in the meson task, as it
    # does both 32 and 64 bit builds and is thus more likely to expose
    # alignment bugs.
    #
    # Address sanitizer in contrast is somewhat expensive. Enable it in the
    # autoconf task, as the meson task tests both 32 and 64bit.
    #
    # disable_coredump=0, abort_on_error=1: for useful backtraces in case of crashes
    # print_stacktraces=1,verbosity=2, duh
    # detect_leaks=0: too many uninteresting leak errors in short-lived binaries
    UBSAN_OPTIONS: print_stacktrace=1:disable_coredump=0:abort_on_error=1:verbosity=2
    ASAN_OPTIONS: print_stacktrace=1:disable_coredump=0:abort_on_error=1:detect_leaks=0

    # SANITIZER_FLAGS is set in the tasks below
    CFLAGS: -Og -ggdb -fno-sanitize-recover=all $SANITIZER_FLAGS
    CXXFLAGS: $CFLAGS
    LDFLAGS: $SANITIZER_FLAGS
    CC: ccache gcc
    CXX: ccache g++
    # GCC emits a warning for llvm-14, so switch to a newer one.
    LLVM_CONFIG: llvm-config-16

    LINUX_CONFIGURE_FEATURES: *LINUX_CONFIGURE_FEATURES
    LINUX_MESON_FEATURES: *LINUX_MESON_FEATURES

    LANG: C
    CCACHE_STATSLOG: $CCACHE_DIR.stats.log

  <<: *linux_task_template
  depends_on: SanityCheck

  ccache_cache:
    *ccache

  sysinfo_script: |
    id
    uname -a
    cat /proc/cmdline
    ulimit -a -H && ulimit -a -S
    export
  create_user_script: |
    useradd -m postgres
    chown -R postgres:postgres .
    mkdir -p ${CCACHE_DIR}
    chown -R postgres:postgres ${CCACHE_DIR}
    echo '* - memlock 134217728' > /etc/security/limits.d/postgres.conf
    su postgres -c "ulimit -l -H && ulimit -l -S"
    # Can't change container's kernel.core_pattern. Postgres user can't write
    # to / normally. Change that.
    chown root:postgres /
    chmod g+rwx /

  setup_hosts_file_script: |
    cat >> /etc/hosts <<-EOF
      127.0.0.1 pg-loadbalancetest
      127.0.0.2 pg-loadbalancetest
      127.0.0.3 pg-loadbalancetest
    EOF

  #setup_additional_packages_script: |
    #apt-get update
    #DEBIAN_FRONTEND=noninteractive apt-get -y install ...

  matrix:
    - name: Linux - Debian Trixie - Autoconf
      only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*linux-autoconf.*'

      # Do not use a container for this
      compute_engine_instance:
        image_project: $IMAGE_PROJECT
        image: family/$IMAGE_FAMILY
        platform: $PLATFORM
        cpu: $CPUS
        disk: $DISK_SIZE

      env:
        SANITIZER_FLAGS: -fsanitize=address
        PG_TEST_PG_COMBINEBACKUP_MODE: --copy-file-range

      # Normally, the "relation segment" code basically has no coverage in our
      # tests, because we (quite reasonably) don't generate tables large
      # enough in tests. We've had plenty bugs that we didn't notice due the
      # code not being exercised much. Thus specify a very small segment size
      # here. Use a non-power-of-two segment size, given we currently allow
      # that.
      configure_script: |
        su postgres <<-EOF
          mkdir build; cd build; ../configure \
            --enable-cassert --enable-injection-points --enable-debug \
            --enable-tap-tests --enable-nls \
            --with-segsize-blocks=6 \
            \
            ${LINUX_CONFIGURE_FEATURES} \
            \
            CLANG="ccache clang-16"
        EOF
      build_script: su postgres -c "cd build && make -s -j${BUILD_JOBS} world-bin"
      upload_caches: ccache

      test_world_script: |
        su postgres <<-EOF
          ulimit -c unlimited # default is 0
          cd build
          make -s ${CHECK} ${CHECKFLAGS} -j${TEST_JOBS}
        EOF

      on_failure:
        <<: *on_failure_ac

    - name: Linux - Debian Trixie - Meson
      only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*linux-meson.*'

      env:
        CCACHE_MAXSIZE: "2400M" # tests two different builds
        SANITIZER_FLAGS: -fsanitize=alignment,undefined

      configure_script: |
        su postgres <<-EOF
          meson setup \
            --buildtype=debug \
            -Dcassert=true -Dinjection_points=true \
            ${LINUX_MESON_FEATURES} \
            build
        EOF

      build_script: su postgres -c 'ninja -C build -j${BUILD_JOBS} ${MBUILD_TARGET}'

      # Also build & test in a 32bit build - it's gotten rare to test that
      # locally.
      configure_32_script: |
        su postgres <<-EOF
          export CC='ccache gcc -m32'
          meson setup \
            --buildtype=debug \
            -Dcassert=true -Dinjection_points=true \
            ${LINUX_MESON_FEATURES} \
            -Dllvm=disabled \
            --pkg-config-path /usr/lib/i386-linux-gnu/pkgconfig/ \
            -DPERL=perl5.36-i386-linux-gnu \
            build-32
        EOF

      build_32_script: su postgres -c 'ninja -C build-32 -j${BUILD_JOBS} ${MBUILD_TARGET}'

      upload_caches: ccache

      test_world_script: |
        su postgres <<-EOF
          ulimit -c unlimited
          meson test $MTEST_ARGS --num-processes ${TEST_JOBS}
        EOF
        # so that we don't upload 64bit logs if 32bit fails
        rm -rf build/

      # There's currently no coverage of icu with LANG=C in the buildfarm. We
      # can easily provide some here by running one of the sets of tests that
      # way. Newer versions of python insist on changing the LC_CTYPE away
      # from C, prevent that with PYTHONCOERCECLOCALE.
      test_world_32_script: |
        su postgres <<-EOF
          ulimit -c unlimited
          PYTHONCOERCECLOCALE=0 LANG=C PG_FAILED_TESTDIR=`pwd`/failed.build-32 meson test $MTEST_ARGS -C build-32 --num-processes ${TEST_JOBS}
        EOF

      ccache_stats_end_script:
        ccache -s
        CCACHE_MAXSIZE=1200M ccache --cleanup

      on_failure:
        <<: *on_failure_meson

  on_failure:
    cores_script: src/tools/ci/cores_backtrace.sh linux /tmp/cores


task:
  name: macOS - Sonoma - Meson
  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*(macos|darwin|osx).*'
  depends_on: SanityCheck

  env:
    CPUS: 4 # always get that much for cirrusci macOS instances
    BUILD_JOBS: $CPUS
    # Test performance regresses noticably when using all cores. 8 seems to
    # work OK. See
    # https://postgr.es/m/20220927040208.l3shfcidovpzqxfh%40awork3.anarazel.de
    TEST_JOBS: 8
    IMAGE: ghcr.io/cirruslabs/macos-runner:sonoma

    CIRRUS_WORKING_DIR: ${HOME}/pgsql/
    CCACHE_DIR: ${HOME}/ccache
    MACPORTS_CACHE: ${HOME}/macports-cache

    MACOS_PACKAGE_LIST: >-
      ccache
      icu
      kerberos5
      lz4
      meson
      openldap
      openssl
      p5.34-io-tty
      p5.34-ipc-run
      python312
      tcl
      zstd

    CC: ccache cc
    CXX: ccache c++
    CFLAGS: -Og -ggdb
    CXXFLAGS: -Og -ggdb

    PG_TEST_PG_UPGRADE_MODE: --clone
    PG_TEST_PG_COMBINEBACKUP_MODE: --clone

  <<: *macos_task_template

  sysinfo_script: |
    id
    uname -a
    ulimit -a -H && ulimit -a -S
    export

  setup_core_files_script:
    - mkdir ${HOME}/cores
    - sudo sysctl kern.corefile="${HOME}/cores/core.%P"

  # Use macports, even though homebrew is installed. The installation
  # of the additional packages we need would take quite a while with
  # homebrew, even if we cache the downloads. We can't cache all of
  # homebrew, because it's already large. So we use macports. To cache
  # the installation we create a .dmg file that we mount if it already
  # exists.
  # XXX: The reason for the direct p5.34* references is that we'd need
  # the large macport tree around to figure out that p5-io-tty is
  # actually p5.34-io-tty. Using the unversioned name works, but
  # updates macports every time.
  macports_cache:
    folder: ${MACPORTS_CACHE}
    fingerprint_script: |
      # Reinstall packages if the OS major version, the list of the packages
      # to install or the MacPorts install script changes.
      sw_vers -productVersion | sed 's/\..*//'
      echo $MACOS_PACKAGE_LIST
      md5 src/tools/ci/ci_macports_packages.sh
    reupload_on_changes: true
  setup_additional_packages_script: |
    sh src/tools/ci/ci_macports_packages.sh $MACOS_PACKAGE_LIST
    # system python doesn't provide headers
    sudo /opt/local/bin/port select python3 python312
    # Make macports install visible for subsequent steps
    echo PATH=/opt/local/sbin/:/opt/local/bin/:$PATH >> $CIRRUS_ENV
  upload_caches: macports

  ccache_cache:
    *ccache

  configure_script: |
    export PKG_CONFIG_PATH="/opt/local/lib/pkgconfig/"
    meson setup \
      --buildtype=debug \
      -Dextra_include_dirs=/opt/local/include \
      -Dextra_lib_dirs=/opt/local/lib \
      -Dcassert=true -Dinjection_points=true \
      -Duuid=e2fs -Ddtrace=auto \
      build

  build_script: ninja -C build -j${BUILD_JOBS} ${MBUILD_TARGET} && ccache --show-log-stats
  upload_caches: ccache

  test_world_script: |
    ulimit -c unlimited # default is 0
    ulimit -n 1024 # default is 256, pretty low
    meson test $MTEST_ARGS --num-processes ${TEST_JOBS}

  on_failure:
    <<: *on_failure_meson
    cores_script: src/tools/ci/cores_backtrace.sh macos "${HOME}/cores"


WINDOWS_ENVIRONMENT_BASE: &WINDOWS_ENVIRONMENT_BASE
  env:
    # Half the allowed per-user CPU cores
    CPUS: 4

    # The default cirrus working dir is in a directory msbuild complains about
    CIRRUS_WORKING_DIR: "c:/cirrus"
    # git's tar doesn't deal with drive letters, see
    # https://postgr.es/m/b6782dc3-a7b0-ed56-175f-f8f54cb08d67%40dunslane.net
    TAR: "c:/windows/system32/tar.exe"
    # Avoids port conflicts between concurrent tap test runs
    PG_TEST_USE_UNIX_SOCKETS: 1
    PG_REGRESS_SOCK_DIR: "c:/cirrus/"
    DISK_SIZE: 50
    IMAGE_FAMILY: pg-ci-windows-ci

  sysinfo_script: |
    chcp
    systeminfo
    powershell -Command get-psdrive -psprovider filesystem
    set


task:
  name: Windows - Server 2019, VS 2019 - Meson & ninja
  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*windows-msvc.*'
  depends_on: SanityCheck
  skip: "changesIncludeOnly('doc/*')"
  << : *WINDOWS_ENVIRONMENT_BASE

  env:
    TEST_JOBS: 8 # wild guess, data based value welcome

    CC: c:\msys64\ucrt64\bin\ccache.exe cl.exe
    CCACHE_DIR: $CIRRUS_WORKING_DIR/.ccache
    CCACHE_MAXSIZE: "1G"
    CCACHE_SLOPPINESS: pch_defines,time_macros
    CCACHE_DEPEND: 1

    # Cirrus defaults to SetErrorMode(SEM_NOGPFAULTERRORBOX | ...). That
    # prevents crash reporting from working unless binaries do SetErrorMode()
    # themselves. Furthermore, it appears that either python or, more likely,
    # the C runtime has a bug where SEM_NOGPFAULTERRORBOX can very
    # occasionally *trigger* a crash on process exit - which is hard to debug,
    # given that it explicitly prevents crash dumps from working...
    # 0x8001 is SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX
    CIRRUS_WINDOWS_ERROR_MODE: 0x8001
    INSTALL_TESTS: 1

  <<: *windows_task_template

  setup_additional_packages_script: |
    REM choco install -y --no-progress ...

  ccache_cache:
    *ccache

  setup_hosts_file_script: |
    echo 127.0.0.1 pg-loadbalancetest >> c:\Windows\System32\Drivers\etc\hosts
    echo 127.0.0.2 pg-loadbalancetest >> c:\Windows\System32\Drivers\etc\hosts
    echo 127.0.0.3 pg-loadbalancetest >> c:\Windows\System32\Drivers\etc\hosts
    type c:\Windows\System32\Drivers\etc\hosts

  # Use /DEBUG:FASTLINK to avoid high memory usage during linking
  # Use /Z7 to write separate debug files, to allow ccache to work
  configure_script: |
    vcvarsall x64
    meson setup build --backend ninja --buildtype debug -Dc_link_args=/DEBUG:FASTLINK -Dcassert=true -Dinjection_points=true -Db_pch=true -Dextra_lib_dirs=c:\openssl\1.1\lib -Dextra_include_dirs=c:\openssl\1.1\include -DTAR=%TAR% -Dc_args="/Z7"

  build_script: |
    vcvarsall x64

    REM disable options which would disable compression
    SET CCACHE_NOCOMPRESS=
    SET CCACHE_HARDLINK=
    SET CCACHE_FILECLONE=

    ninja -C build %MBUILD_TARGET% |tee build.txt
    REM Since pipes lose the exit status of the preceding command, rerun the compilation
    REM without the pipe, exiting now if it fails, to avoid trying to run checks
    ninja -C build > nul

    c:\msys64\ucrt64\bin\ccache.exe --show-log-stats -v
    c:\msys64\ucrt64\bin\ccache.exe --show-stats -v
    c:\msys64\ucrt64\bin\ccache.exe --show-compression
    SET CCACHE_MAXSIZE=500M
    c:\msys64\ucrt64\bin\ccache.exe --cleanup

  always:
    upload_caches: [ccache]

  check_world_script: |
    vcvarsall x64
    meson test %MTEST_ARGS% --num-processes %TEST_JOBS%

  # This should be last, so check_world is run even if there are warnings
  always:
    compiler_warnings_script:
      # this avoids using metachars which would be interpretted by the windows shell
      - sh -c 'if grep ": warning " build.txt; then exit 1; fi; exit 0'

  on_failure:
    <<: *on_failure_meson
    crashlog_artifacts:
      path: "crashlog-*.txt"
      type: text/plain


task:
  << : *WINDOWS_ENVIRONMENT_BASE
  name: Windows - Server 2019, MinGW64 - Meson

  # due to resource constraints we don't run this task by default for now
  trigger_type: manual
  # worth using only_if despite being manual, otherwise this task will show up
  # when e.g. ci-os-only: linux is used.
  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*mingw.*'
  # otherwise it'll be sorted before other tasks
  depends_on: SanityCheck

  env:
    TEST_JOBS: 4 # higher concurrency causes occasional failures
    CCACHE_DIR: C:/msys64/ccache
    CCACHE_MAXSIZE: "500M"
    CCACHE_SLOPPINESS: pch_defines,time_macros
    CCACHE_DEPEND: 1
    # for some reason mingw plpython cannot find its installation without this
    PYTHONHOME: C:/msys64/ucrt64
    # prevents MSYS bash from resetting error mode
    MSYS: winjitdebug
    # Start bash in current working directory
    CHERE_INVOKING: 1
    BASH: C:\msys64\usr\bin\bash.exe -l

  <<: *windows_task_template

  ccache_cache:
    *ccache

  setup_additional_packages_script: |
    REM C:\msys64\usr\bin\pacman.exe -S --noconfirm ...

  mingw_info_script: |
    %BASH% -c "where gcc"
    %BASH% -c "gcc --version"
    %BASH% -c "where perl"
    %BASH% -c "perl --version"

  # disable -Dnls as the number of files it creates cause a noticable slowdown
  configure_script: |
    %BASH% -c "meson setup -Ddebug=true -Doptimization=g -Dcassert=true -Dinjection_points=true -Db_pch=true -Dnls=disabled -DTAR=%TAR% build"

  # Do not disable compression, since PCH are huge
  build_script: |
    %BASH% -c "unset CCACHE_NOCOMPRESS CCACHE_HARDLINK CCACHE_FILECLONE && ninja -C build ${MBUILD_TARGET}"
    %BASH% -c "ccache --show-stats -v"
    %BASH% -c "ccache --show-compression"
    %BASH% -c "ccache --show-log-stats"

  upload_caches: ccache

  test_world_script: |
    %BASH% -c "meson test %MTEST_ARGS% --num-processes %TEST_JOBS%"

  on_failure:
    <<: *on_failure_meson
    crashlog_artifacts:
      path: "crashlog-*.txt"
      type: text/plain


# Compile for windows from linux (to exercise that, and since compiling under msys is slow)
# The depending task will later run checks under windows
task:
  name: WindowsCrossCompile

  # task that did not run, count as a success, so we need to recheck freebsd's
  # condition here; cirus warns if the "only_if" condition doesn't match the task being depended on
  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*windows-cross.*'
  depends_on: SanityCheck

  env:
    CPUS: 4
    BUILD_JOBS: 4
    CCACHE_DIR: "/tmp/ccache_dir"
    LINUX_CONFIGURE_FEATURES: *LINUX_CONFIGURE_FEATURES
    #XXX

  container:
    #image: $CONTAINER_REPO/linux_debian_bookworm_ci:latest
    image: $CONTAINER_REPO/linux_debian_bullseye_ci:latest
    cpu: $CPUS

  sysinfo_script: |
    id
    uname -a
    cat /proc/cmdline
    ulimit -a -H && ulimit -a -S
    x86_64-w64-mingw32-gcc -v
    export

  ccache_cache:
    folder: $CCACHE_DIR
    fingerprint_key: ccache/windows-cross
    reupload_on_changes: true

  setup_additional_packages_script: |
    #apt-get update
    #DEBIAN_FRONTEND=noninteractive apt-get -y install ...

  # TODO setup_script: echo "COPT=-Werror" > src/Makefile.custom
  # TODO: check for compiler warnings ?

  # cross-compile to windows
  mingw_cross_compile_script: |
    mkdir build && cd build
    meson setup \
      --cross-file=../src/tools/ci/linux-mingw-w64-64bit.txt \
      -Dwerror=true \
      -Dcassert=true \
      ..
    time ninja -j${BUILD_JOBS}
    ccache --show-stats

  # XXX: doesn't actually need to be "populated" ..
  crosscompile_cache:
    folder: build/tmp_install
    fingerprint_key: windows/crosscompile/install
    reupload_on_changes: true
    populate_script: /bin/true

  mingw_cross_install_script:
    #- meson test -C build tmp_install
    #- mkdir -p build/tmp_install
    #- rm -fr build/tmp_install
    #- --destdir since 0.57
    #- find build/tmp_install -ls || true
    - DESTDIR=$CIRRUS_WORKING_DIR/build/tmp_install meson install --no-rebuild -C build
    - DESTDIR=$CIRRUS_WORKING_DIR/build/tmp_install meson test install_test_files -C build
    #- cd build; DESTDIR=$CIRRUS_WORKING_DIR/build/tmp_install meson introspect --targets
    #- DESTDIR=$CIRRUS_WORKING_DIR/build/tmp_install meson compile src/interfaces/ecpg/test/pg_regress_ecpg.exe -C build
    - cp -vt build/tmp_install/usr/local/pgsql/bin build/src/test/regress/*.dll
    - cp -vt build/tmp_install/usr/local/pgsql/bin build/src/tools/pg_bsd_indent/pg_bsd_indent.exe
    - cp -vt build/tmp_install/usr/local/pgsql/bin build/src/interfaces/ecpg/test/pg_regress_ecpg.exe
    - cp -vt build/tmp_install/usr/local/pgsql/bin build/src/test/modules/test_json_parser/test_json_parser_incremental.exe
    - cp -vt build/tmp_install/usr/local/pgsql/bin build/src/test/modules/test_json_parser/test_json_parser_perf.exe
    - cp -rv build/src/interfaces/libpq/test build/tmp_install/usr/local/pgsql/libpq-test
    - cp -rv build/src/interfaces/ecpg/test build/tmp_install/usr/local/pgsql/ecpg-test

    - find build/tmp_install

  always:
    upload_caches: [crosscompile, ccache]

  on_failure:
    <<: *on_failure_meson


# Run checks under windows with cross-compiled result from above
task:
  name: WindowsCrossRun

  # cirus warns if the "only_if" condition doesn't match the task being depended on
  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*windows-run-cross.*'
  depends_on: [WindowsCrossCompile, SanityCheck]

  env:
    CPUS: 4
    BUILD_JOBS: 4
    TEST_JOBS: 8
    CIRRUS_WORKING_DIR: "c:/cirrus"
    NO_TEMP_INSTALL: 1
    TAR: "c:/windows/system32/tar.exe"
    PG_TEST_USE_UNIX_SOCKETS: 1
    PG_REGRESS_SOCK_DIR: "c:/cirrus/"
    PROVE_FLAGS: -j10 --timer
    CIRRUS_ESCAPING_PROCESSES: 1

  #windows_container:
    #dockerfile: src/tools/ci/windows-dockerfile
  compute_engine_instance:
    cpu: $CPUS
    memory: 4G
    image_project: $IMAGE_PROJECT
    image: family/pg-ci-windows-ci-vs-2019
    platform: windows

  sysinfo_script: |
    chcp
    systeminfo
    powershell -Command get-psdrive -psprovider filesystem
    set

  setup_additional_packages_script:
    #choco install -y --no-progress meson
    #- curl.exe -sSL -o c:\python-setup.exe https://www.python.org/ftp/python/3.10.6/python-3.10.6-amd64.exe
    #- ps: Start-Process -Wait -FilePath c:\python-setup.exe -ArgumentList '/quiet', 'SimpleInstall=1', 'PrependPath=1', 'CompileAll=1', 'TargetDir=c:\python', 'InstallAllUsers=1', 'Shortcuts=0', 'Include_docs=0', 'Include_tcltk=0', 'Include_tests=0'
# Include_debug=0 Include_symbols=0'
    - c:\python\python -m pip install meson ninja

  configure_script: |
    vcvarsall x64
    SET PATH=c:\python\Scripts;%PATH%
    meson setup build -Dplperl=disabled -Dplpython=disabled -Dlibxml=disabled --buildtype plain -DTAR=%TAR%

  crosscompile_run_cache:
    folder: build/tmp_install
    fingerprint_key: windows/crosscompile/install
    reupload_on_changes: false

  rearrange_script:
    - find build/tmp_install -ls
      #- cp -rv build/tmp_install/usr/local/pgsql/share/postgres.bki build/tmp_install/usr/local/pgsql/share/system_constraints.sql build/src/include/catalog
      #- cp -rv build/tmp_install/usr/local/pgsql/include/server/* build/src/include/
      #- cp -rv build/tmp_install/usr/local/pgsql/lib/libpgport.a build/src/port/
    # copy DLLs: regress,refint,autoinc:
    - cp -rvt build/src/test/regress build/tmp_install/usr/local/pgsql/bin/*.dll
    # Copy stuff expected by the install script:
    - cp -rvt build/tmp_install/usr/local/pgsql/lib build/tmp_install/usr/local/pgsql/bin/*.dll
    # indent/ecpg/json think that they're special..
    #- cp -rvt build/src/interfaces/ecpg/test        build/tmp_install/usr/local/pgsql/bin/pg_regress_ecpg.exe
    #- cp -rvt build/src/interfaces/ecpg/test        build/tmp_install/usr/local/pgsql/bin/compat_informix
    #- cp -rvt build/src/interfaces/ecpg/test        build/tmp_install/usr/local/pgsql/bin/compat_oracle
    #- cp -rvt build/src/interfaces/ecpg/test        build/tmp_install/usr/local/pgsql/bin/connect
    #- cp -rvt build/src/interfaces/ecpg/test        build/tmp_install/usr/local/pgsql/bin/pgtypeslib
    #- cp -rvt build/src/interfaces/ecpg/test        build/tmp_install/usr/local/pgsql/bin/preproc
    #- cp -rvt build/src/interfaces/ecpg/test        build/tmp_install/usr/local/pgsql/bin/sql
    #- cp -rvt build/src/interfaces/ecpg/test        build/tmp_install/usr/local/pgsql/bin/thread
    - cp -rvt build/src/interfaces/ecpg/test        build/tmp_install/usr/local/pgsql/ecpg-test/*
    - cp -vt build/src/interfaces/libpq/test       build/tmp_install/usr/local/pgsql/libpq-test/*.exe
    - cp -vt build/tmp_install/usr/local/pgsql/lib build/tmp_install/usr/local/pgsql/bin/pg_bsd_indent.exe
    - cp -vt src/test/modules/test_json_parser build/tmp_install/usr/local/pgsql/bin/test_json_parser_incremental.exe
    - cp -vt src/test/modules/test_json_parser build/tmp_install/usr/local/pgsql/bin/test_json_parser_perf.exe

    # Copy stuff expected by install-test-modules:
    - sh -c 'for a in build/src/test/modules/*; do if test -d $a; then cp -rv build/tmp_install/usr/local/pgsql/lib/*.dll "$a"; fi; done'
    - SET PATH=c:\python\Scripts;%PATH%
    - sh src/tools/ci/windows-reinstall
    - find build/src -ls

  check_world_script: |
    SET PATH=c:\python\Scripts;%PATH%
    meson test %MTEST_ARGS% --num-processes %TEST_JOBS% --suite setup
    meson test %MTEST_ARGS% --num-processes %TEST_JOBS% regress/regress pg_bsd_indent/001_pg_bsd_indent ecpg/ecpg test_json_parser/001_test_json_parser_incremental test_json_parser/002_inline test_json_parser/003_test_semantic test_json_parser/004_test_parser_perf test_json_parser/004_test_parser_perf libpq/002_api libpq/001_uri pg_stat_statements/regress pg_upgrade/002_pg_upgrade
    meson test %MTEST_ARGS% --num-processes %TEST_JOBS% regress/regress

  on_failure:
    <<: *on_failure_meson
    crashlog_artifacts:
      path: "crashlog-*.txt"
      type: text/plain


task:
  name: Windows - Cygwin

  # due to resource constraints we don't run this task by default for now
  #XXX trigger_type: manual
  # worth using only_if despite being manual, otherwise this task will show up
  # when e.g. ci-os-only: linux is used.
  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*cygwin.*'
  # otherwise it'll be sorted before other tasks
  depends_on: SanityCheck

  #XXX only_if: $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*cygwin.*'
  #timeout_in: 120m

  env:
    CPUS: 4
    BUILD_JOBS: $CPUS
    TEST_JOBS: $CPUS
    CCACHE_DIR: /tmp/ccache
    CCACHE_LOGFILE: ccache.log
    # --disable-dynamicbase
    # --with-gssapi
    CONFIGURE_CACHE: /tmp/ccache/configure.cache
    PG_TEST_USE_UNIX_SOCKETS: 1
    EXTRA_REGRESS_OPTS: --max-connections=1
    PG_TEST_EXTRA: ldap ssl # disable kerberos
    CC: ccache gcc
    CFLAGS: -Og -ggdb
    BASH: C:\tools\cygwin\bin\bash.exe --login

  #windows_container:
    #image: cirrusci/windowsservercore:2019-2022.06.23
    #os_version: 2019
  compute_engine_instance:
    image_project: $IMAGE_PROJECT
    image: family/pg-ci-windows-ci-vs-2019
    platform: windows
    cpu: $CPUS
    memory: 4G

  setup_additional_packages_script: |
    choco install -y --no-progress cygwin
    C:\tools\cygwin\cygwinsetup.exe -q -P cygrunsrv,make,gcc-core,ccache,binutils,libtool,pkg-config,flex,bison,zlib-devel,libxml2-devel,libxslt-devel,libssl-devel,openldap-devel,libreadline-devel,perl,meson,ninja,perl-IPC-Run
    REM libkrb5-devel,krb5-server
    %BASH% -c "cygserver-config -y"
    %BASH% -c "echo 'kern.ipc.semmni 1024' >> /etc/cygserver.conf"
    %BASH% -c "echo 'kern.ipc.semmns 1024' >> /etc/cygserver.conf"
    %BASH% -c "net start cygserver"

  sysinfo_script: |
    chcp
    systeminfo
    powershell -Command get-psdrive -psprovider filesystem
    set
    %BASH% -c "id; uname -a; ulimit -a -H; ulimit -a -S; export"

  ccache_cache:
    folder: C:\tools\cygwin\tmp\ccache
    fingerprint_key: ccache/cygwin
    reupload_on_changes: true

  configure_script: |
    %BASH% -c "cd '%cd%' && meson setup --buildtype=debug -Dcassert=true -Dssl=openssl -Duuid=e2fs -DPG_TEST_EXTRA='$PG_TEST_EXTRA' build"

  build_script: |
    %BASH% -c "cd '%cd%' && ninja -C build -j${BUILD_JOBS}"
    %BASH% -c "ccache --show-stats"

  always:
    upload_caches: ccache

  #%BASH% -c "cd '%cd%' && echo 'data_sync_retry = on' >> src/tools/ci/pg_ci_base.conf"
  #%BASH% -c "cd '%cd%' && echo 'wal_sync_method = fdatasync' >> src/tools/ci/pg_ci_base.conf"
  test_world_script: |
    %BASH% -c "cd '%cd%' && meson test $MTEST_ARGS --suite setup"
    %BASH% -c "cd '%cd%' && meson test $MTEST_ARGS --num-processes ${TEST_JOBS} --repeat 9 tmp_install subscription/013_partition subscription/010_truncate subscription/026_stats subscription/021_twophase subscription/027_nosuperuser"
    REM %BASH% -c "cd '%cd%' && false"
    %BASH% -c "cd '%cd%' && meson test $MTEST_ARGS --num-processes ${TEST_JOBS}"

  on_failure:
    <<: *on_failure_meson
    cores_script: |
      %BASH% -c "cd '%cd%' && src/tools/ci/cores_backtrace.sh cygwin ."

task:
  name: CompilerWarnings

  # To limit unnecessary work, only run this after success of the SanityCheck.
  # XXX And avoid running all 8 allowed linux CPUs at once.
  # This is particularly important for this task as we intentionally
  # use always: to continue after failures. Task that did not run count as a
  # success, so we need to recheck SanityChecks's condition here ...
  depends_on: SanityCheck
  # task that did not run, count as a success, so we need to recheck Linux'
  # condition here ...
  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*warnings.*'
  image: debian:sid
  platform: linux
  architecture: arm64
  greedy: true

  env:
    CPUS: 4
    BUILD_JOBS: ${CPUS}
    IMAGE_FAMILY: pg-ci-bookworm
    TEST_JOBS: 4

    # Use larger ccache cache, as this task compiles with multiple compilers /
    # flag combinations.  The cache size is set high now, and manually pruned later,
    # to avoid cache cleaning cycles during the early compilations pruning
    # compilation results which could've been used during later compilations.
    CCACHE_MAXSIZE: "6G"
    CCACHE_DIR: "/tmp/ccache_dir"

    LINUX_CONFIGURE_FEATURES: *LINUX_CONFIGURE_FEATURES
    LINUX_MESON_FEATURES: *LINUX_MESON_FEATURES

    # GCC emits a warning for llvm-14, so switch to a newer one.
    LLVM_CONFIG: llvm-config-16

  <<: *linux_task_template
  ccache_cache:
    *ccache

  ccache_stats_start_script:
    ccache -s

  sysinfo_script: |
    id
    uname -a
    cat /proc/cmdline
    ulimit -a -H && ulimit -a -S
    gcc -v
    clang -v
    export

  #setup_additional_packages_script: |
    #apt-get update
    #DEBIAN_FRONTEND=noninteractive apt-get -y install ...

  create_user_script: |
    useradd -m postgres -d /tmp/cirrus-ci-build
    # Can't change container's kernel.core_pattern. Postgres user can't write
    # to / normally. Change that.
    chown root:postgres /
    chmod g+rwx /

  ###
  # Test that code can be built with gcc/clang without warnings
  ###

  # Trace probes have a history of getting accidentally broken. Use the
  # different compilers to build with different combinations of dtrace on/off
  # and cassert on/off.

  always:
    # gcc, cassert off, dtrace on
    gcc_warning_script: |
      mkdir build.gcc && cd build.gcc
      CC="ccache gcc" CXX="ccache g++" \
        meson setup \
          --buildtype=debug \
          -Dwerror=true \
          -Dcassert=false \
          -Ddtrace=disabled \
          ..
      time ninja -j${BUILD_JOBS}
      CCACHE_MAXSIZE=1G ccache --cleanup
      ccache --show-log-stats

    # gcc, cassert on, dtrace off
    gcc_a_warning_script: |
      cd build.gcc
      meson configure \
        -Dcassert=true \
        -Ddtrace=disabled
      time ninja -j${BUILD_JOBS}
      CCACHE_MAXSIZE=1G ccache --cleanup
      ccache --show-log-stats

    # clang, cassert off, dtrace off
    clang_warning_script: |
      mkdir build.clang && cd build.clang
      CC="ccache clang-19" CXX="ccache clang++-19" \
        meson setup \
          --buildtype=debug \
          -Dwerror=true \
          -Dcassert=false \
          -Ddtrace=disabled \
          ..
      time ninja -j${BUILD_JOBS}
      CCACHE_MAXSIZE=1G ccache --cleanup
      ccache --show-log-stats

    # clang, cassert on, dtrace on
    clang_a_warning_script: |
      cd build.clang
      meson configure \
        -Dcassert=true \
        -Ddtrace=disabled
      time ninja -j${BUILD_JOBS}
      CCACHE_MAXSIZE=1G ccache --cleanup
      ccache --show-log-stats

    # cross-compile to windows
    mingw_cross_warning_script: |
      mkdir build-w64 && cd build-w64
      meson setup \
        --buildtype=debug \
        --cross-file=../src/tools/ci/linux-mingw-w64-64bit.txt \
        -Dwerror=true \
        -Dcassert=true \
        ..
      time ninja -j${BUILD_JOBS}
      CCACHE_MAXSIZE=1G ccache --cleanup
      ccache --show-log-stats

    ccache_stats_end_script:
      ccache -s
      ccache --show-log-stats
      CCACHE_MAXSIZE=2G ccache --cleanup
    upload_caches: ccache

  ###
  # Verify docs can be built, and upload changed docs as artifacts
  ###
  # XXX: Only do this if there have been changes in doc/ since last build
    docs_build_script: |
      mkdir build-autoconf
      cd build-autoconf
      time ../configure \
        --cache gcc.cache \
        --without-icu \
        CC="ccache gcc" CXX="ccache g++" CLANG="ccache clang-19"
      make -s -j${BUILD_JOBS} clean
      time make -s -j${BUILD_JOBS} -C doc
      cp -r doc ../new-docs

      # Re-build HTML docs from the base commit.
      git checkout "$BASE_COMMIT" -- ../doc
      make -s -C doc clean
      time make -s -C doc html
      cp -r doc ../old-docs

    # Exercise HTML and other docs:
    ninja_docs_build_script: |
      make maintainer-clean # XXX not needed once compiler-warnings is switched meson
      mkdir build-ninja
      cd build-ninja
      time meson setup -D buildtype=plain
      time ninja docs
      cp -r doc ../new-docs

      # Re-build HTML docs from the base commit.
      git checkout "$BASE_COMMIT" -- ../doc
      ninja clean
      time ninja doc/src/sgml/html
      cp -r doc ../old-docs

    copy_changed_docs_script:
      - src/tools/ci/copy-changed-docs "old-docs" "new-docs" "html_docs"

    html_docs_artifacts:
      paths: ['html_docs/*.html', 'html_docs/*.png', 'html_docs/*.css']

    gcc_check_script: |
      mkdir -p tmp
      chown -R postgres:postgres .
      su postgres -c "meson test $MTEST_ARGS -C build.gcc --suite setup"
      su postgres -c "meson test $MTEST_ARGS -C build.gcc --num-processes $TEST_JOBS tmp_install regress/regress"
      rm -r build.gcc

    clang_check_script: |
      chown -R postgres:postgres .
      PG_TEST_EXTRA='ssl' # Disable ldap and kerberos
      su postgres -c "meson test $MTEST_ARGS -C build.clang --suite setup"
      #DESTDIR=$CIRRUS_WORKING_DIR/build.clang/tmp_install meson install --no-rebuild -C build.clang
      #su postgres -c "meson test $MTEST_ARGS -C build.clang --num-processes $TEST_JOBS recovery/019_replslot_limit pgbench/001_pgbench_with_server pgbench/002_pgbench_no_server"
      su postgres -c "meson test $MTEST_ARGS -C build.clang --num-processes $TEST_JOBS tmp_install regress/regress"
      su postgres -c "meson test $MTEST_ARGS -C build.clang --num-processes $TEST_JOBS"
      rm -r build.clang

    ###
    # Verify headerscheck / cpluspluscheck succeed
    #
    # - Don't use ccache, the files are uncacheable, polluting ccache's
    #   cache
    # - Use -fmax-errors, as particularly cpluspluscheck can be very verbose
    # - XXX have to disable ICU to avoid errors:
    #   https://postgr.es/m/20220323002024.f2g6tivduzrktgfa%40alap3.anarazel.de
    ###
    headers_headerscheck_script: |
      #mkdir build-ninja
      cd build-ninja
      meson compile src/headerscheck

    headers_cpluspluscheck_script: |
      cd build-ninja
      meson compile src/cpluspluscheck

    on_failure:
      <<: *on_failure_meson
    cores_script: src/tools/ci/cores_backtrace.sh linux /tmp/cores
